# -*- coding: utf-8 -*-
"""Summer_analtyics_practice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-EmA7_nn-0AXMBpfY4fHjO3XceHZKcxX

WEEK-1- ASSIGNMENT 1
"""

Submitted by- Himanshi Lalawni

#1) Start by importing all important libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#2) Read the csv file and assign it to a variable
cars= pd.read_csv('/content/Cars.csv')

cars.head()

#3) Display shape of dataframe
cars.shape

#4) Print all columns of dataframe
cars.columns

#6) Set the 'name' column as the index of dataframe
cars.set_index('name')

#7) Print a list of all the unique mpg values
mpg_unique= cars['mpg'].unique()
print('mpg unique values are-', mpg_unique)

#8) Create a column which contains the horsepower divided by weightas its metric and make this new column the index.
cars['hp/w']= cars['horsepower']/cars['weight']
cars= cars.set_index('hp/w').sort_index(ascending= False)
cars.head()

"""*GRADED Questions (To be answered in the quiz)*"""

#
#cars['horsepower'].max()
cars.loc[cars['horsepower'].idxmax()]

#2. How many cars have mpg â‰¥ 35?
cars[cars['mpg']>=35].shape[0]

#3. What is the most common origin for cars with horsepower > 100 and weight < 3000?

cars[(cars['horsepower']>100) & (cars['weight']<3000)].groupby('origin').size().head(1)

#4. What is the mean acceleration of cars from Japan? (rounded to 2 decimals)

mean_acc= cars['acceleration'].groupby(cars['origin']).mean()
mean_acc['japan']

#5. Which year had the highest average mpg?
cars.groupby('model_year')['mpg'].mean().idxmax()
#cars.loc[cars['mpg'].idxmax()]['model_year']

"""*UNGRADED*"""

#Q1) Find the car (or cars) with the best ratio of horsepower to weight among all cars that also have above-median mpg.
cars[(cars['mpg']>cars['mpg'].median()) & (cars['horsepower']/cars['weight']==cars['horsepower']/cars['weight'].max())]

#Q2) Design a multi-line plot using Matplotlib or Seaborn that shows the evolution of average mpg over the years, separately for each origin
plt.figure(figsize=(12, 6))
sns.lineplot(x= 'model_year', y= 'mpg', data= cars, hue= 'origin')
plt.title('Average MPG Evolution Over Years by Origin')
plt.xlabel('Model Year')
plt.ylabel('Average MPG')
plt.grid(True)
plt.show()

# Q3) Create a Seaborn scatterplot (or PairGrid) where:
#X = horsepower
#Y = weight
#Color by: origin
#Size by: mpg
#Hue order = ['japan', 'europe', 'usa']
#Add meaningful plot titles and axis titles.

plt.figure(figsize=(12, 6))
# Reset the index before plotting to avoid issues with duplicate index values
cars_reset = cars.reset_index()

sns.scatterplot(x= 'horsepower', y= 'weight', data= cars_reset, hue= 'origin', size= 'mpg', hue_order=['japan', 'europe', 'usa'] )
plt.title('Horsepower Over Weight by Origin')
plt.xlabel('Horsepower')
plt.ylabel('Weight')
plt.grid(True)
plt.show()

#Q4)a) Identify car names that appear in more than one model_year.
#cars.groupby('model_year')['name'].value_counts().sort_values(ascending= False).head(10)
cars.groupby('name')['model_year'].value_counts().sort_values(ascending= False).head(10)

#Q4)b) For each such name, compute the standard deviation of mpg across years.
cars.groupby('model_year')['mpg'].std().head(10)

#Q4)c) Return the car(s) with the lowest variation in mpg, among those with at least 2 appearances and std(mpg) < 1.0.
name_counts = cars['name'].value_counts()
names_appearing_at_least_twice = name_counts[name_counts >= 2].index

# Calculate the standard deviation of mpg for each name across years
# We need to group by 'name' to calculate the std for each car name
mpg_std_by_name = cars.groupby('name')['mpg'].std()

# Filter names that have std(mpg) < 1.0
names_with_low_std = mpg_std_by_name[mpg_std_by_name < 1.0].index

# Find the intersection of names appearing at least twice and names with low std
filtered_names = names_appearing_at_least_twice.intersection(names_with_low_std)
filtered_names

#Q4)d) Report the model name(s), number of appearances, and the average mpg.
cars[cars['name'].isin(filtered_names)].groupby('name')['mpg'].mean()

filtered_cars_df = cars[cars['name'].isin(filtered_names)]

# Group by 'name' and calculate the average mpg for each name
average_mpg_by_name = filtered_cars_df.groupby('name')['mpg'].mean()

# To also get the number of appearances, you can count the occurrences
number_of_appearances = filtered_cars_df['name'].value_counts()

# Combine the results if needed, for example, into a new DataFrame
report = pd.DataFrame({
    'Average MPG': average_mpg_by_name,
    'Number of Appearances': number_of_appearances
})
report.sort_values(by= 'Average MPG', ascending= False)
print(report)

